{% extends 'roles/geerlingguy.nginx/templates/vhost.j2' %}

{% block server_redirect %}
### BEGIN REDIRECT ###
{{ super() }}
### END REDIRECT ###
{% endblock %}

{% block server_basic %}

    ### BEGIN LISTEN ###
    listen      {{ item.listen | default('80') }};
    ### END LISTEN ###

    server_name {{ item.server_name }};
    root        {{ item.root }};
    set         $upstream php70;
    index       {{ item.index | default('index.html index.htm') }};

    ### BEGIN SSL ###
    ### END SSL ###
{% endblock %}

{% block server_end %}

    set $upstream php70;

    # Make sure the .well-known directory can be served
    location ~ /.well-known {
        allow all;
    }

    # this prevents hidden files (beginning with a period) from being served
    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }

    # NGINX conversion of the Apache rewrite rules
    if (!-e $request_filename){
        rewrite ^(.*)$ /index.php break;
    }

    location /setup {
        return 301 $scheme://{{ item.server_name }}/;
    }

    location ~ \.php$ {
        # Try the files specified in order. In our case, try the requested URI and if
        # that fails, try (successfully) to pass a 404 error.
        try_files      $uri =404;

        # Include the fastcgi_params defaults provided by nginx
        include        /etc/nginx/fastcgi_params;

        # The amount of time for upstream to wait for a fastcgi process to send data.
        # We keep this *extremely* high so that one can be lazy when remote debugging.
        fastcgi_read_timeout 3600s;

        # Buffer size for reading the header of the backend FastCGI process.
        # This defaults to the value of a single fastcgi_buffers, so does not
        # need to be specified in our case, but it's good to be explicit.
        fastcgi_buffer_size 128k;

        # The number and size of the buffers into which the reply from the FastCGI
        # process in the backend is read.
        #
        # 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
        # to disk and replies under 512k are handled directly in memory.
        fastcgi_buffers 4 128k;

        # SCRIPT_FILENAME is a required parameter for things to work properly,
        # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
        # We define it here to be sure that it exists.
        fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        # Use the upstream defined in the upstream variable.
        fastcgi_pass   $upstream;

        # And get to serving the file!
        fastcgi_index  index.php;
    }
{% endblock %}
